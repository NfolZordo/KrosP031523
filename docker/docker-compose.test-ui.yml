version: '3.3'

services:
  data-manager-service-api:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    image: data-manager-service
    networks:
      - broker-kafka
    depends_on:
      - kafka
      - postgres_data_manager_sql
    ports:
      - '8081:8080'
    environment:
      - SERVER_PORT=8080
      - AUTO_OFFSET_RESET=earliest
      - DB_URL=jdbc:postgresql://postgres_data_manager_sql:5432/data-manager-service
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - DB_DRIVER=org.postgresql.Driver
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
#      - ../build:/app/build
#      - ../.gradle:/root/.gradle

  postgres_data_manager_sql:
    image: postgres:14.1
    networks:
      - broker-kafka
    restart: always
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=data-manager-service
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    networks:
      - broker-kafka
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:latest
    networks:
      - broker-kafka
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    networks:
      - broker-kafka
    depends_on:
      - kafka
    ports:
      - 19000:9000
    environment:
      KAFKA_BROKERCONNECT: kafka:29092

networks:
  broker-kafka:
    driver: bridge
